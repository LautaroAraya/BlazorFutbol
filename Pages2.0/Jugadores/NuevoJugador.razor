@page "/nuevojugador"
@using BlazorFutbol.Interfaces
@using BlazorFutbol.Modelos
@inject IGenericService<Jugador> JugadorService
@inject NavigationManager NavigationManager

<h3>Crear un nuevo jugador</h3>

@if (jugador == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="jugador" OnValidSubmit="GuardarJugador">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre del Jugador</label>
            <InputText class="form-control" @bind-Value="jugador.Nombre" />
        </div>

        <div class="mb-3">
            <label class="form-label">Posición</label>
            <InputText class="form-control" @bind-Value="jugador.Posicion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Equipo</label>
            <InputText class="form-control" @bind-Value="jugador.Equipo" />
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

@code {
    public Jugador? jugador { get; set; } = new Jugador();

    protected override Task OnInitializedAsync()
    {
        // Inicializar el modelo del jugador si es necesario
        return Task.CompletedTask;
    }

    private async Task GuardarJugador()
    {
        if (jugador != null)
        {
            await JugadorService.AddAsync(jugador);
            NavigationManager.NavigateTo("/jugadores");
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/jugadores");
    }
}
